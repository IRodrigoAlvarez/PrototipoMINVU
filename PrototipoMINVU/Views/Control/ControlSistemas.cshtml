@model PrototipoMINVU.Models.Registro


<div class="container-fluid">
    <div class="bg-gradient-primary py-3 shadow-sm">
        <div class="card">
            <div class="card shadow">
                <div class="container-fluid">

                    <div class="row">
                        <div class="font_registro">
                            <h2>Control y visualización sistemas.</h2>
                            <hr />
                        </div>
                    </div>

                    <div class="row" id="textindexregistro">
                        <div class="col-lg-12">
                            <div class="card shadow">
                                <div class="font_registro">
                                    En esta pantalla se podrá controlar los sistemas generales de la base de datos del prototipo.
                                    Aqui se podrán analizar gráficos cuantitativos, que representan la situación de los sistemas actual
                                    para la toma de decisiones.<br /><br />




                                    Se destaca, que las caracteristicas y/o datos escogidos para este prototipo, son a
                                    modo de prueba según las límitaciones del proyecto.<br />


                                    Universidad Tecnológica Metropolitana.<br />

                                    <b>Profesor Guía:</b> Yelka Ruiz.<br />


                                    <b>Rodrigo Álvarez.</b>


                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">


                        <div class="col-lg-5">
                            <div class="font_registro">
                                <b>Seleccione la consulta a ser visualizada mediante un gráfico:</b>
                            </div>
                        </div>


                        <div class="col-lg-5" style="margin-left:-100px; margin-top:-5px">

                            <select id="control_select" class="form-select">

                                <optgroup label="--CONTROL SISTEMAS.--">
                                    <option value="sistemas_ambiente">Sistemas X Ambiente.</option>
                                    <option value="sistemas_estado">Sistemas X Estado.</option>
                                    <option value="subsistemas_sistema">Subsistemas X Sistema General.</option>

                                </optgroup>

                                <optgroup label="--CONTROL SUBSISTEMAS.--">

                                    <option value="subsistemas_ambiente">Subsistemas X por Ambiente.</option>
                                    <option value="subsistemas_estado">Subsistemas X Estado.</option>

                                    <option value="subsistemas_tecnologia">Subsistemas X Tipo de Tecnología.</option>
                                    <option value="subsistemas_area">Subsistemas X Area.</option>
                                    <option value="subsistemas_data">Subsistemas X Dueño de los datos.</option>
                                    <option value="subsistemas_tiposistema">Subsistemas X Tipo de Sistema.</option>
                                    <option value="subsistemas_region">Subsistemas X Región.</option>
                                    <option value="subsistemas_jefe">Subsistemas X Jefe Proyecto.</option>
                                    <option value="subsistemas_control">Subsistemas X Control Acceso.</option>
                                    <option value="subsistemas_alcance">Subsistemas X Alcance.</option>
                                    <option value="subsistemas_legacy">Subsistemas Heredados (Legacy).</option>


                                </optgroup>

                                <optgroup label="--CONTROL INTEGRACIONES.--">
                                    <option value="integraciones_subsistemas">Integraciones de Entidades X subsistema.</option>
                                </optgroup>
                            </select>
                        </div>

                        <div class="col-lg-2">
                            <button id="submitBtn">CREAR GRÁFICO</button>
                            <input type="reset" onclick="location.reload();" value="REINICIAR" />
                        </div>


                    </div>

                    <hr />

                    <div class="col-lg-10">
                       OJO: Se recomienda actualizar la página cada vez que se crea un gráfico por temas de memoria Caché **
                    </div>
                    <hr />
                    <div class="row">

                        <div class="col-lg-3">

                        </div>
                        <div class="col-lg-6">

                            <div class="panel panel-default" id="panel1">
                                <div class="panel-heading"></div>
                                <div class="panel-body">
                                    <canvas id="myBarChart" width="100" height="50"></canvas>
                                </div>
                            </div>

                        </div>
                        <div class="col-lg-3">

                        </div>
                       

                    </div>

                    <div class="row">
                        <div class="col-lg-3">

                        </div>

                        <div class="col-lg-6">

                            <div class="panel panel-default" id="panel2">
                                <div class="panel-heading"></div>
                                <div class="panel-body">
                                    <canvas id="myBarChart2" width="100" height="50"></canvas>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3">

                        </div>

                    </div>


                </div>
            </div>
        </div>
    </div>
</div>


<footer class="footer">
    <div class="container-fluid">
        <div class="row text-muted">
            <div class="col-6 text-start">
                <p class="mb-0">
                    <a class="text-muted"> <span>Copyright &copy; Universidad Tecnológica Metropolitana - Facultad Ingenieria</span></a>								&copy;
                </p>
            </div>
            <div class="col-6 text-end">
                <ul class="list-inline">
                    <li class="list-inline-item">
                        <a class="text-muted" href="https://www.minvu.gob.cl/beneficios/vivienda/" target="_blank">Vivienda</a>
                    </li>
                    <li class="list-inline-item">
                        <a class="text-muted" href="https://www.minvu.gob.cl/noticias/" target="_blank">Noticia</a>
                    </li>
                    <li class="list-inline-item">
                        <a class="text-muted" href="https://www.minvu.gob.cl/sobre-minvu/" target="_blank">Sobre MINVU</a>
                    </li>
                    <li class="list-inline-item">
                        <a class="text-muted" href="https://www.minvu.gob.cl/preguntas-frecuentes/" target="_blank">Preguntas Frecuentes</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</footer>


<script>

    // script principal para la creacion de los gráficos

    $(document).ready(function ()
    {
        $("#submitBtn").click(function ()
        {
            // Captura el valor seleccionado en el select
            let IDseleccion = document.getElementById("control_select").value;


            // CREADOR DE LOS GRÁFICOS de control de sistemas.

            if (IDseleccion === "subsistemas_sistema") {
                $.ajax({
                    url: '@Url.Action("ReporteSISTEMAXVARIABLE", "Control")',
                    type: "GET",
                    data: { control_select: IDseleccion },
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        const labelCantidadMap = {};

                        data.forEach(item => {
                            const labelX = item.LabelEjeX;
                            const labelY = item.LabelEjeY;

                            // Ignorar elementos con LabelEjeY igual a "Sin información"
                            if (labelY !== "Sin información") {
                                // Incluye el conteo solo cuando LabelEjeX no sea igual a "Sin información"
                                if (labelX !== "Sin información") {
                                    const label = labelX;
                                    labelCantidadMap[label] = (labelCantidadMap[label] || 0) + 1;
                                }
                            }
                        });

                        const arrayLabels = Object.keys(labelCantidadMap);
                        const arrayCantidad = Object.values(labelCantidadMap);

                        const controlBar1 = document.getElementById("myBarChart");

                        // Define un array de colores para las barras
                        const barColors = Array.from({ length: arrayLabels.length }, () => getRandomColor());

                        new Chart(controlBar1, {
                            type: 'bar',
                            data: {
                                labels: arrayLabels,
                                datasets: [{
                                    label: "N° SubSistemas Enlazados",
                                    backgroundColor: barColors,  // Asigna los colores a las barras
                                    borderColor: "#000000",
                                    borderWidth: 0,
                                    data: arrayCantidad
                                }],
                            },
                            options: {
                                title: {
                                    display: true,
                                    text: 'N° de Subsistemas enlazados según Sistema General' // Aquí puedes ingresar el título que desees
                                },
                                scales: {
                                    xAxes: [{
                                        gridLines: {
                                            display: false
                                        },
                                        ticks: {
                                            maxTicksLimit: arrayLabels.length,
                                        },
                                        scaleLabel: {
                                            display: true,
                                            labelString: 'Sistemas Generales'
                                        }
                                    }],
                                    yAxes: [{
                                        ticks: {
                                            min: 0,
                                            max: Math.max(...arrayCantidad),
                                            maxTicksLimit: 10,
                                        },
                                        gridLines: {
                                            display: true,
                                        },
                                        scaleLabel: {
                                            display: true,
                                            labelString: 'Subsistemas registrados'
                                        }
                                    }],
                                },
                                legend: {
                                    display: false
                                }
                            }
                        });
                    }
                });
            }
            else
            {
                if (IDseleccion === "sistemas_ambiente") {
                    $.ajax({
                        url: '@Url.Action("ReporteSISTEMAXVARIABLE", "Control")',
                        type: "GET",
                        data: { control_select: IDseleccion },
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            const labelCantidadMap = {};

                            data.forEach(item => {
                                const labelX = item.LabelEjeX;
                                const labelY = item.LabelEjeY;

                                // Ignorar elementos con LabelEjeY igual a "Sin información"
                                if (labelY !== "Sin información") {
                                    // Incluye el conteo solo cuando LabelEjeX no sea igual a "Sin información"
                                    if (labelX !== "Sin información") {
                                        const label = labelX;
                                        labelCantidadMap[label] = (labelCantidadMap[label] || 0) + 1;
                                    }
                                }
                            });

                            const arrayLabels = Object.keys(labelCantidadMap);
                            const arrayCantidad = Object.values(labelCantidadMap);

                            const controlBar1 = document.getElementById("myBarChart");

                            // Define un array de colores para las barras
                            const barColors = Array.from({ length: arrayLabels.length }, () => getRandomColor());

                            new Chart(controlBar1, {
                                type: 'bar',
                                data: {
                                    labels: arrayLabels,
                                    datasets: [{
                                        label: "N° de Sistemas",
                                        backgroundColor: barColors,  // Asigna los colores a las barras
                                        borderColor: "#000000",
                                        borderWidth: 0,
                                        data: arrayCantidad
                                    }],
                                },
                                options: {
                                    title: {
                                        display: true,
                                        text: 'N° de Sistemas enlazados según Ambiente alojado' // Aquí puedes ingresar el título que desees
                                    },
                                    scales: {
                                        xAxes: [{
                                            gridLines: {
                                                display: false
                                            },
                                            ticks: {
                                                maxTicksLimit: arrayLabels.length,
                                            },
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Tipos de Ambientes Registrados'
                                            }
                                        }],
                                        yAxes: [{
                                            ticks: {
                                                min: 0,
                                                max: Math.max(...arrayCantidad),
                                                maxTicksLimit: 10,
                                            },
                                            gridLines: {
                                                display: true,
                                            },
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Sistemas Registrados'
                                            }
                                        }],
                                    },
                                    legend: {
                                        display: false
                                    }
                                }
                            });
                        }
                    });
                }
                else {
                    if (IDseleccion === "sistemas_estado") {
                        $.ajax({
                            url: '@Url.Action("ReporteSISTEMAXVARIABLE", "Control")',
                            type: "GET",
                            data: { control_select: IDseleccion },
                            dataType: "json",
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                const labelCantidadMap = {};

                                data.forEach(item => {
                                    const labelX = item.LabelEjeX;
                                    const labelY = item.LabelEjeY;

                                    // Ignorar elementos con LabelEjeY igual a "Sin información"
                                    if (labelY !== "Sin información") {
                                        // Incluye el conteo solo cuando LabelEjeX no sea igual a "Sin información"
                                        if (labelX !== "Sin información") {
                                            const label = labelX;
                                            labelCantidadMap[label] = (labelCantidadMap[label] || 0) + 1;
                                        }
                                    }
                                });

                                const arrayLabels = Object.keys(labelCantidadMap);
                                const arrayCantidad = Object.values(labelCantidadMap);

                                const controlBar1 = document.getElementById("myBarChart");

                                // Define un array de colores para las barras
                                const barColors = Array.from({ length: arrayLabels.length }, () => getRandomColor());

                                var arreglo = IDseleccion.split("_");

                                new Chart(controlBar1, {
                                    type: 'bar',
                                    data: {
                                        labels: arrayLabels,
                                        datasets: [{
                                            label: "N° de Sistemas",
                                            backgroundColor: barColors,  // Asigna los colores a las barras
                                            borderColor: "#000000",
                                            borderWidth: 0,
                                            data: arrayCantidad
                                        }],
                                    },
                                    options: {
                                        title: {
                                            display: true,
                                            text: 'N° de Sistemas enlazados según tipo de Estado' // Aquí puedes ingresar el título que desees
                                        },
                                        scales: {
                                            xAxes: [{
                                                gridLines: {
                                                    display: false
                                                },
                                                ticks: {
                                                    maxTicksLimit: arrayLabels.length,
                                                },
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Tipos de ' + arreglo[1]
                                                }
                                            }],
                                            yAxes: [{
                                                ticks: {
                                                    min: 0,
                                                    max: Math.max(...arrayCantidad),
                                                    maxTicksLimit: 10,
                                                },
                                                gridLines: {
                                                    display: true,
                                                },
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Sistemas registrados'
                                                }
                                            }],
                                        },
                                        legend: {
                                            display: false
                                        }
                                    }
                                });
                            }
                        });
                    }
                    else {

                        // CREADOR DE LOS GRÁFICOS de control de integración.
                        if (IDseleccion === "integraciones_subsistemas") {
                            $.ajax({
                                url: '@Url.Action("ReporteINTEEX", "Control")',
                                type: "GET",
                                data: { control_select: IDseleccion },
                                dataType: "json",
                                contentType: "application/json; charset=utf-8",
                                success: function (data) {
                                    const labelCantidadMap = {};

                                    data.forEach(item => {
                                        const labelX = item.LabelEjeX;
                                        const labelY = item.LabelEjeY;

                                        // Ignorar elementos con LabelEjeY igual a "Sin información"
                                        if (labelY !== "Sin información") {
                                            // Incluye el conteo solo cuando LabelEjeX no sea igual a "Sin información"
                                            if (labelX !== "Sin información") {
                                                const label = labelX;
                                                labelCantidadMap[label] = (labelCantidadMap[label] || 0) + 1;
                                            }
                                        }
                                    });

                                    const arrayLabels = Object.keys(labelCantidadMap);
                                    const arrayCantidad = Object.values(labelCantidadMap);

                                    const controlBar1 = document.getElementById("myBarChart");

                                    // Define un array de colores para las barras
                                    const barColors = Array.from({ length: arrayLabels.length }, () => getRandomColor());

                                    new Chart(controlBar1, {
                                        type: 'bar',
                                        data: {
                                            labels: arrayLabels,
                                            datasets: [{
                                                label: "Cantidad de integraciones con entidades externas",
                                                backgroundColor: barColors,  // Asigna los colores a las barras
                                                borderColor: "#000000",
                                                borderWidth: 0,
                                                data: arrayCantidad
                                            }],
                                        },
                                        options: {
                                            title: {
                                                display: true,
                                                text: 'Integraciones de entidades externas en subsistemas del MINVU.' // Aquí puedes ingresar el título que desees
                                            },
                                            scales: {
                                                xAxes: [{
                                                    gridLines: {
                                                        display: false
                                                    },
                                                    ticks: {
                                                        maxTicksLimit: arrayLabels.length,
                                                    },
                                                    scaleLabel: {
                                                        display: true,
                                                        labelString: 'Sistemas Generales'
                                                    }
                                                }],
                                                yAxes: [{
                                                    ticks: {
                                                        min: 0,
                                                        max: Math.max(...arrayCantidad),
                                                        maxTicksLimit: 10,
                                                    },
                                                    gridLines: {
                                                        display: true,
                                                    },
                                                    scaleLabel: {
                                                        display: true,
                                                        labelString: 'Cantidad de subsistemas registrados'
                                                    }
                                                }],
                                            },
                                            legend: {
                                                display: false
                                            }
                                        }
                                    });
                                }
                            });
                            $.ajax({
                                url: '@Url.Action("ReporteINTEIN", "Control")',
                                type: "GET",
                                data: { control_select: IDseleccion },
                                dataType: "json",
                                contentType: "application/json; charset=utf-8",
                                success: function (data) {
                                    const labelCantidadMap = {};

                                    data.forEach(item => {
                                        const labelX = item.LabelEjeX;
                                        const labelY = item.LabelEjeY;

                                        // Ignorar elementos con LabelEjeY igual a "Sin información"
                                        if (labelY !== "Sin información") {
                                            // Incluye el conteo solo cuando LabelEjeX no sea igual a "Sin información"
                                            if (labelX !== "Sin información") {
                                                const label = labelX;
                                                labelCantidadMap[label] = (labelCantidadMap[label] || 0) + 1;
                                            }
                                        }
                                    });

                                    const arrayLabels = Object.keys(labelCantidadMap);
                                    const arrayCantidad = Object.values(labelCantidadMap);

                                    const controlBar2 = document.getElementById("myBarChart2");

                                    // Define un array de colores para las barras
                                    const barColors = Array.from({ length: arrayLabels.length }, () => getRandomColor());

                                    new Chart(controlBar2, {
                                        type: 'bar',
                                        data: {
                                            labels: arrayLabels,
                                            datasets: [{
                                                label: "Cantidad de integraciones con entidades internas",
                                                backgroundColor: barColors,  // Asigna los colores a las barras
                                                borderColor: "#000000",
                                                borderWidth: 0,
                                                data: arrayCantidad
                                            }],
                                        },
                                        options: {
                                            title: {
                                                display: true,
                                                text: 'Integraciones de entidades internas en subsistemas del MINVU.' // Aquí puedes ingresar el título que desees
                                            },
                                            scales: {
                                                xAxes: [{
                                                    gridLines: {
                                                        display: false
                                                    },
                                                    ticks: {
                                                        maxTicksLimit: arrayLabels.length,
                                                    },
                                                    scaleLabel: {
                                                        display: true,
                                                        labelString: 'Sistemas Generales'
                                                    }
                                                }],
                                                yAxes: [{
                                                    ticks: {
                                                        min: 0,
                                                        max: Math.max(...arrayCantidad),
                                                        maxTicksLimit: 10,
                                                    },
                                                    gridLines: {
                                                        display: true,
                                                    },
                                                    scaleLabel: {
                                                        display: true,
                                                        labelString: 'Cantidad de subsistemas registrados'
                                                    }
                                                }],
                                            },
                                            legend: {
                                                display: false
                                            }
                                        }
                                    });
                                }
                            });
                        }
                        else {
                            // CREADOR DE LOS GRÁFICOS de control de subsistemas.

                            if (IDseleccion === "subsistemas_ambiente") {
                               $.ajax({
                                    url: '@Url.Action("ReporteSUBSISTEMAXVARIABLE", "Control")',
                                    type: "GET",
                                    data: { control_select: IDseleccion },
                                    dataType: "json",
                                    contentType: "application/json; charset=utf-8",
                                    success: function (data)
                                    {
                                        const labelCantidadMap = {};

                                        data.forEach(item => {
                                            const labelX = item.LabelEjeX;
                                            const labelY = item.LabelEjeY;

                                            // Ignorar elementos con LabelEjeY igual a "Sin información"
                                            if (labelY !== "Sin información") {
                                                // Incluye el conteo solo cuando LabelEjeX no sea igual a "Sin información"
                                                if (labelX !== "Sin información") {
                                                    const label = labelX;
                                                    labelCantidadMap[label] = (labelCantidadMap[label] || 0) + 1;
                                                }
                                            }
                                        });

                                        const arrayLabels = Object.keys(labelCantidadMap);
                                        const arrayCantidad = Object.values(labelCantidadMap);

                                        const controlBar1 = document.getElementById("myBarChart");

                                        // Define un array de colores para las barras
                                        const barColors = Array.from({ length: arrayLabels.length }, () => getRandomColor());

                                        new Chart(controlBar1, {
                                            type: 'bar',
                                            data: {
                                                labels: arrayLabels,
                                                datasets: [{
                                                    label: "SubSistemas en este ambiente",
                                                    backgroundColor: barColors,  // Asigna los colores a las barras
                                                    borderColor: "#000000",
                                                    borderWidth: 0,
                                                    data: arrayCantidad
                                                }],
                                            },
                                            options: {
                                                title: {
                                                    display: true,
                                                    text: 'N° de Subsistemas enlazados según Ambiente alojado del MINVU.' // Aquí puedes ingresar el título que desees
                                                },
                                                scales: {
                                                    xAxes: [{
                                                        gridLines: {
                                                            display: false
                                                        },
                                                        ticks: {
                                                            maxTicksLimit: arrayLabels.length,
                                                        },
                                                        scaleLabel: {
                                                            display: true,
                                                            labelString: 'Tipos de Ambientes'
                                                        }
                                                    }],
                                                    yAxes: [{
                                                        ticks: {
                                                            min: 0,
                                                            max: Math.max(...arrayCantidad),
                                                            maxTicksLimit: 10,
                                                        },
                                                        gridLines: {
                                                            display: true,
                                                        },
                                                        scaleLabel: {
                                                            display: true,
                                                            labelString: 'SubSistemas registrados'
                                                        }
                                                    }],
                                                },
                                                legend: {
                                                    display: false
                                                }
                                            }
                                        });
                                    }
                                });
                            }

                            if (IDseleccion === "subsistemas_estado") {
                                $.ajax({
                                    url: '@Url.Action("ReporteSUBSISTEMAXVARIABLE", "Control")',
                                    type: "GET",
                                    data: { control_select: IDseleccion },
                                    dataType: "json",
                                    contentType: "application/json; charset=utf-8",
                                    success: function (data) {
                                        const labelCantidadMap = {};

                                        data.forEach(item => {
                                            const labelX = item.LabelEjeX;
                                            const labelY = item.LabelEjeY;

                                            // Ignorar elementos con LabelEjeY igual a "Sin información"
                                            if (labelY !== "Sin información") {
                                                // Incluye el conteo solo cuando LabelEjeX no sea igual a "Sin información"
                                                if (labelX !== "Sin información") {
                                                    const label = labelX;
                                                    labelCantidadMap[label] = (labelCantidadMap[label] || 0) + 1;
                                                }
                                            }
                                        });

                                        const arrayLabels = Object.keys(labelCantidadMap);
                                        const arrayCantidad = Object.values(labelCantidadMap);

                                        const controlBar1 = document.getElementById("myBarChart");

                                        // Define un array de colores para las barras
                                        const barColors = Array.from({ length: arrayLabels.length }, () => getRandomColor());

                                        new Chart(controlBar1, {
                                            type: 'bar',
                                            data: {
                                                labels: arrayLabels,
                                                datasets: [{
                                                    label: "SubSistemas en este estado",
                                                    backgroundColor: barColors,  // Asigna los colores a las barras
                                                    borderColor: "#000000",
                                                    borderWidth: 0,
                                                    data: arrayCantidad
                                                }],
                                            },
                                            options: {
                                                title: {
                                                    display: true,
                                                    text: 'N° de Subsistemas enlazados según tipo de Estado ' + 'del MINVU.' // Aquí puedes ingresar el título que desees
                                                },
                                                scales: {
                                                    xAxes: [{
                                                        gridLines: {
                                                            display: false
                                                        },
                                                        ticks: {
                                                            maxTicksLimit: arrayLabels.length,
                                                        },
                                                        scaleLabel: {
                                                            display: true,
                                                            labelString: 'Tipos de Estados'
                                                        }
                                                    }],
                                                    yAxes: [{
                                                        ticks: {
                                                            min: 0,
                                                            max: Math.max(...arrayCantidad),
                                                            maxTicksLimit: 10,
                                                        },
                                                        gridLines: {
                                                            display: true,
                                                        },
                                                        scaleLabel: {
                                                            display: true,
                                                            labelString: 'SubSistemas registrados'
                                                        }
                                                    }],
                                                },
                                                legend: {
                                                    display: false
                                                }
                                            }
                                        });
                                    }
                                });
                            } else {
                                $.ajax({
                                    url: '@Url.Action("ReporteSUBSISTEMAXVARIABLE", "Control")',
                                    type: "GET",
                                    data: { control_select: IDseleccion },
                                    dataType: "json",
                                    contentType: "application/json; charset=utf-8",
                                    success: function (data)
                                    {
                                        const labelCantidadMap = {};

                                        data.forEach(item => {
                                            const labelX = item.LabelEjeX;
                                            const labelY = item.LabelEjeY;

                                            // Ignorar elementos con LabelEjeY igual a "Sin información"
                                            if (labelY !== "Sin información") {
                                                // Incluye el conteo solo cuando LabelEjeX no sea igual a "Sin información"
                                                if (labelX !== "Sin información") {
                                                    const label = labelX;
                                                    labelCantidadMap[label] = (labelCantidadMap[label] || 0) + 1;
                                                }
                                            }
                                        });

                                        const arrayLabels = Object.keys(labelCantidadMap);
                                        const arrayCantidad = Object.values(labelCantidadMap);

                                        const controlBar1 = document.getElementById("myBarChart");

                                        // Define un array de colores para las barras
                                        const barColors = Array.from({ length: arrayLabels.length }, () => getRandomColor());

                                        var arreglo = IDseleccion.split("_");

                                        if (arreglo[1] === "data")
                                            arreglo[1] = "Dueño de los datos";

                                        new Chart(controlBar1, {
                                            type: 'bar',
                                            data: {
                                                labels: arrayLabels,
                                                datasets: [{
                                                    label: "SubSistemas registrados",
                                                    backgroundColor: barColors,  // Asigna los colores a las barras
                                                    borderColor: "#000000",
                                                    borderWidth: 0,
                                                    data: arrayCantidad
                                                }],
                                            },
                                            options: {
                                                title: {
                                                    display: true,
                                                    text: 'N° de Subsistemas enlazados según ' + arreglo[1].toUpperCase() + ' del MINVU.' 
                                                },
                                                scales: {
                                                    xAxes: [{
                                                        gridLines: {
                                                            display: false
                                                        },
                                                        ticks: {
                                                            maxTicksLimit: arrayLabels.length,
                                                        },
                                                        scaleLabel: {
                                                            display: true,
                                                            labelString: 'Tipos de ' + arreglo[1]
                                                        }
                                                    }],
                                                    yAxes: [{
                                                        ticks: {
                                                            min: 0,
                                                            max: Math.max(...arrayCantidad),
                                                            maxTicksLimit: 10,
                                                        },
                                                        gridLines: {
                                                            display: true,
                                                        },
                                                        scaleLabel: {
                                                            display: true,
                                                            labelString: 'SubSistemas registrados'
                                                        }
                                                    }],
                                                },
                                                legend: {
                                                    display: false
                                                }
                                            }
                                        });
                                    }
                                });
                            }
                        }
                    }
                }
            }
        });
    });



    // Función para generar colores aleatorios
    function getRandomColor()
    {
        const letters = "0123456789ABCDEF";
        let color = "#";
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    
</script>
